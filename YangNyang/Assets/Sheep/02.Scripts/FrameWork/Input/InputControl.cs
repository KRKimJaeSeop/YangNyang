//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Sheep/02.Scripts/FrameWork/Input/InputControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControl"",
    ""maps"": [
        {
            ""name"": ""Play"",
            ""id"": ""9397ee46-c928-4c74-a49e-eb27fa13f4b8"",
            ""actions"": [
                {
                    ""name"": ""Primary Contact"",
                    ""type"": ""Button"",
                    ""id"": ""29dd7cef-9708-4192-bea1-79d3a294d4a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Secondary Contact"",
                    ""type"": ""Button"",
                    ""id"": ""ab5b415a-fcc4-4020-8ad3-db6eb4f2dbdc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary Position"",
                    ""type"": ""Value"",
                    ""id"": ""4266c9f2-6ad4-410a-b807-b74153a56b57"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Secondary Position"",
                    ""type"": ""Value"",
                    ""id"": ""e2538f74-a30e-4143-ad40-5337c2227596"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Primary Tap"",
                    ""type"": ""Button"",
                    ""id"": ""84356d19-c2d6-47ca-bba5-b21a65400427"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary Hold"",
                    ""type"": ""Button"",
                    ""id"": ""fa17b06d-db88-41a2-8f02-943d90f9bc04"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse Wheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d794aa5b-00cc-424c-ba85-f75025e03b08"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9976b869-bb55-47d0-8a4b-6bd921321ef0"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Contact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cef62eda-73cf-4b01-8e98-1d629f9c0321"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Contact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35737429-e4e9-40df-9dc4-73d52f9f1e24"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""334eda9a-e0dd-497c-aec6-0e0251668ac7"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa6ed9ec-d967-4b76-946d-f93ed0dbba7c"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a0b990c3-be23-4b8d-9123-630ce3a06317"",
                    ""path"": ""<Touchscreen>/touch0/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a023e8b-1c8e-4582-92de-6dee29afd72c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e053ccc-5a64-4f23-b0c1-157ee811cbc0"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efca226f-3fe3-41ac-92dd-c9d834e497d6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af9a2e04-5fcf-4524-942b-a1d5ab8901a1"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary Contact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae5e9b5e-8698-4289-a7d4-4a72199ce32a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary Contact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75372dad-0003-427b-a5f6-c634ace6c73d"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Wheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Play
        m_Play = asset.FindActionMap("Play", throwIfNotFound: true);
        m_Play_PrimaryContact = m_Play.FindAction("Primary Contact", throwIfNotFound: true);
        m_Play_SecondaryContact = m_Play.FindAction("Secondary Contact", throwIfNotFound: true);
        m_Play_PrimaryPosition = m_Play.FindAction("Primary Position", throwIfNotFound: true);
        m_Play_SecondaryPosition = m_Play.FindAction("Secondary Position", throwIfNotFound: true);
        m_Play_PrimaryTap = m_Play.FindAction("Primary Tap", throwIfNotFound: true);
        m_Play_PrimaryHold = m_Play.FindAction("Primary Hold", throwIfNotFound: true);
        m_Play_MouseWheel = m_Play.FindAction("Mouse Wheel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Play
    private readonly InputActionMap m_Play;
    private List<IPlayActions> m_PlayActionsCallbackInterfaces = new List<IPlayActions>();
    private readonly InputAction m_Play_PrimaryContact;
    private readonly InputAction m_Play_SecondaryContact;
    private readonly InputAction m_Play_PrimaryPosition;
    private readonly InputAction m_Play_SecondaryPosition;
    private readonly InputAction m_Play_PrimaryTap;
    private readonly InputAction m_Play_PrimaryHold;
    private readonly InputAction m_Play_MouseWheel;
    public struct PlayActions
    {
        private @InputControl m_Wrapper;
        public PlayActions(@InputControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryContact => m_Wrapper.m_Play_PrimaryContact;
        public InputAction @SecondaryContact => m_Wrapper.m_Play_SecondaryContact;
        public InputAction @PrimaryPosition => m_Wrapper.m_Play_PrimaryPosition;
        public InputAction @SecondaryPosition => m_Wrapper.m_Play_SecondaryPosition;
        public InputAction @PrimaryTap => m_Wrapper.m_Play_PrimaryTap;
        public InputAction @PrimaryHold => m_Wrapper.m_Play_PrimaryHold;
        public InputAction @MouseWheel => m_Wrapper.m_Play_MouseWheel;
        public InputActionMap Get() { return m_Wrapper.m_Play; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayActions set) { return set.Get(); }
        public void AddCallbacks(IPlayActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayActionsCallbackInterfaces.Add(instance);
            @PrimaryContact.started += instance.OnPrimaryContact;
            @PrimaryContact.performed += instance.OnPrimaryContact;
            @PrimaryContact.canceled += instance.OnPrimaryContact;
            @SecondaryContact.started += instance.OnSecondaryContact;
            @SecondaryContact.performed += instance.OnSecondaryContact;
            @SecondaryContact.canceled += instance.OnSecondaryContact;
            @PrimaryPosition.started += instance.OnPrimaryPosition;
            @PrimaryPosition.performed += instance.OnPrimaryPosition;
            @PrimaryPosition.canceled += instance.OnPrimaryPosition;
            @SecondaryPosition.started += instance.OnSecondaryPosition;
            @SecondaryPosition.performed += instance.OnSecondaryPosition;
            @SecondaryPosition.canceled += instance.OnSecondaryPosition;
            @PrimaryTap.started += instance.OnPrimaryTap;
            @PrimaryTap.performed += instance.OnPrimaryTap;
            @PrimaryTap.canceled += instance.OnPrimaryTap;
            @PrimaryHold.started += instance.OnPrimaryHold;
            @PrimaryHold.performed += instance.OnPrimaryHold;
            @PrimaryHold.canceled += instance.OnPrimaryHold;
            @MouseWheel.started += instance.OnMouseWheel;
            @MouseWheel.performed += instance.OnMouseWheel;
            @MouseWheel.canceled += instance.OnMouseWheel;
        }

        private void UnregisterCallbacks(IPlayActions instance)
        {
            @PrimaryContact.started -= instance.OnPrimaryContact;
            @PrimaryContact.performed -= instance.OnPrimaryContact;
            @PrimaryContact.canceled -= instance.OnPrimaryContact;
            @SecondaryContact.started -= instance.OnSecondaryContact;
            @SecondaryContact.performed -= instance.OnSecondaryContact;
            @SecondaryContact.canceled -= instance.OnSecondaryContact;
            @PrimaryPosition.started -= instance.OnPrimaryPosition;
            @PrimaryPosition.performed -= instance.OnPrimaryPosition;
            @PrimaryPosition.canceled -= instance.OnPrimaryPosition;
            @SecondaryPosition.started -= instance.OnSecondaryPosition;
            @SecondaryPosition.performed -= instance.OnSecondaryPosition;
            @SecondaryPosition.canceled -= instance.OnSecondaryPosition;
            @PrimaryTap.started -= instance.OnPrimaryTap;
            @PrimaryTap.performed -= instance.OnPrimaryTap;
            @PrimaryTap.canceled -= instance.OnPrimaryTap;
            @PrimaryHold.started -= instance.OnPrimaryHold;
            @PrimaryHold.performed -= instance.OnPrimaryHold;
            @PrimaryHold.canceled -= instance.OnPrimaryHold;
            @MouseWheel.started -= instance.OnMouseWheel;
            @MouseWheel.performed -= instance.OnMouseWheel;
            @MouseWheel.canceled -= instance.OnMouseWheel;
        }

        public void RemoveCallbacks(IPlayActions instance)
        {
            if (m_Wrapper.m_PlayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayActions @Play => new PlayActions(this);
    public interface IPlayActions
    {
        void OnPrimaryContact(InputAction.CallbackContext context);
        void OnSecondaryContact(InputAction.CallbackContext context);
        void OnPrimaryPosition(InputAction.CallbackContext context);
        void OnSecondaryPosition(InputAction.CallbackContext context);
        void OnPrimaryTap(InputAction.CallbackContext context);
        void OnPrimaryHold(InputAction.CallbackContext context);
        void OnMouseWheel(InputAction.CallbackContext context);
    }
}
